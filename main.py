from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackContext
import logging
import uuid
import random
import csv
import os
import json

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

# --- –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏) ---
users = {}  # {user_id: {'name': '...', 'groups': {group_id: True, ...}}}
groups = {} # {group_id: {'name': '...', 'admin_id': ..., 'rake': ..., 'invite_code': '...', 'members': [user_id1, user_id2, ...]}}
group_members = {} # {(user_id, group_id): {'cash': ..., 'debt': ...}}


# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤ ---
try:
    with open('russian_words.txt', 'r', encoding='utf-8') as f:
        russian_words = [word.strip() for word in f.readlines()]
except FileNotFoundError:
    russian_words = ["—Å–ª–æ–≤–æ", "–¥–µ–ª–æ", "–∏–≥—Ä–∞", "–ø–æ–∫–µ—Ä", "—Å—Ç–∞–≤–∫–∞"] # –ó–∞–ø–∞—Å–Ω–æ–π —Å–ø–∏—Å–æ–∫

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–¥–∞ –∏–∑ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤ ---
# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ ---
try:
    with open('russian_words.txt.txt', 'r', encoding='utf-8') as f:
        word_list = [word.strip() for word in f.readlines()]
except FileNotFoundError:
    word_list = ["—Å–ª–æ–≤–æ", "–¥–µ–ª–æ", "–∏–≥—Ä–∞", "–ø–æ–∫–µ—Ä", "—Å—Ç–∞–≤–∫–∞"]

def generate_invite_code_russian(num_words=5):
    return '-'.join(random.choice(word_list) for _ in range(num_words))


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def start(update: Update, context: CallbackContext):
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü—Ä–∏–≤–µ—Ç! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /register <–∏–º—è>")

async def help_command(update: Update, context: CallbackContext):
    help_text = """
–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ —è –ø–æ–Ω–∏–º–∞—é:

/register <–∏–º—è> ‚Äî –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –ü—Ä–∏–º–µ—Ä: /register –í–∞—Å—è

/create_group <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ä–µ–π–∫_–≤_–ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö> ‚Äî –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –∏–≥—Ä–æ–∫–æ–≤. –ü—Ä–∏–º–µ—Ä: /create_group –ù–∞—à–ü–æ–∫–µ—Ä 5 (—Ä–µ–π–∫ 5%)

/join <–∞–π–¥–∏_–≥—Ä—É–ø–ø—ã_–∏–ª–∏_–∫–æ–¥> ‚Äî –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ –ø–æ ID –∏–ª–∏ –∫–æ–¥—É –∏–∑ 5 —Å–ª–æ–≤. –ü—Ä–∏–º–µ—Ä: /join a1b2c3d4 –∏–ª–∏ /join —Å–ª–æ–≤–æ-–¥–µ–ª–æ-–∏–≥—Ä–∞-–ø–æ–∫–µ—Ä-—Å—Ç–∞–≤–∫–∞

/buy_in <–∏–º—è –∏–≥—Ä–æ–∫–∞> <–¥–æ–ª–≥/–∫—ç—à> <—Å—É–º–º–∞> ‚Äî –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫—É —Ñ–∏—à–∫–∏ –∑–∞ –¥–æ–ª–≥ –∏–ª–∏ –∫—ç—à. –ü—Ä–∏–º–µ—Ä: /buy_in –í–∞—Å—è –∫—ç—à 1000

/buy_out <–∏–º—è –∏–≥—Ä–æ–∫–∞> <—Å—É–º–º–∞> ‚Äî –ê–¥–º–∏–Ω —Å–ø–∏—Å—ã–≤–∞–µ—Ç —É –∏–≥—Ä–æ–∫–∞ —Ñ–∏—à–∫–∏ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫—ç—à, –¥–æ–ª–≥ –∏ —Ä–µ–π–∫. –ü—Ä–∏–º–µ—Ä: /buy_out –í–∞—Å—è 5000

/match_debts ‚Äî –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ–ª–≥–∏ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏ –∏ –≥—Ä—É–ø–ø–æ–π.

/balance ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å (–∫—ç—à, –¥–æ–ª–≥, —Ñ–∏—à–∫–∏) –ø–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º.

/group_balance ‚Äî –ë–∞–ª–∞–Ω—Å –≥—Ä—É–ø–ø—ã (–¥–ª—è –∞–¥–º–∏–Ω–∞): –∫—ç—à, –¥–æ–ª–≥–∏, —Ñ–∏—à–∫–∏, —Ä–µ–π–∫.

/end_game ‚Äî –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É: –æ–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã –≥—Ä—É–ø–ø—ã –∏ –∏–≥—Ä–æ–∫–æ–≤.

/who ‚Äî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å: –∏–º—è, ID, –≥—Ä—É–ø–ø—ã.

/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É.
/admin_info - —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    """
    await context.bot.send_message(chat_id=update.effective_chat.id, text=help_text)
async def player_info(update: Update, context: CallbackContext):
    help_text = """
üéÆ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞:
–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è:

/register <–∏–º—è>

–ü—Ä–∏–º–µ—Ä: /register –í–∞—Å—è

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ:

/join <–∫–æ–¥ –≥—Ä—É–ø–ø—ã –∏–ª–∏ ID>

–ü—Ä–∏–º–µ—Ä: /join —Å–ª–æ–≤–æ-–¥–µ–ª–æ-–∏–≥—Ä–∞-–ø–æ–∫–µ—Ä-—Å—Ç–∞–≤–∫–∞

–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –±–∞–ª–∞–Ω—Å—ã:

/balance

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–≤–æ–π –∫—ç—à, –¥–æ–ª–≥ –∏ —Ñ–∏—à–∫–∏ –ø–æ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ.

–£–∑–Ω–∞—Ç—å –æ —Å–µ–±–µ:

/who

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–≤–æ–π ID –∏ –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —É—á–∞—Å—Ç–≤—É–µ—à—å.

–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:

–ö–æ–≥–¥–∞ –∞–¥–º–∏–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç/–∑–∞–±–∏—Ä–∞–µ—Ç —Ñ–∏—à–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ–ª–≥–∏, —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏.

    """
    await context.bot.send_message(chat_id=update.effective_chat.id, text=help_text)
async def admin_info(update: Update, context: CallbackContext):
    help_text = """
üìã –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã:
–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è:

/register <–∏–º—è>

–ü—Ä–∏–º–µ—Ä: /register –ê–Ω–¥—Ä–µ–π

–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É:

/create_group <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ä–µ–π–∫_–≤_–ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö>

–ü—Ä–∏–º–µ—Ä: /create_group –ù–∞—à–ü–æ–∫–µ—Ä 5

–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:

–ö–æ–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã.

–ü—Ä–∏–º–µ—Ä: —Å–ª–æ–≤–æ-–¥–µ–ª–æ-–∏–≥—Ä–∞-–ø–æ–∫–µ—Ä-—Å—Ç–∞–≤–∫–∞

–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏—à–∫–∏ –∏–≥—Ä–æ–∫—É:

/buy_in <–∏–º—è –∏–≥—Ä–æ–∫–∞> <–¥–æ–ª–≥/–∫—ç—à> <—Å—É–º–º–∞>

–ü—Ä–∏–º–µ—Ä: /buy_in –í–∞—Å—è –∫—ç—à 1000

–ó–∞–±—Ä–∞—Ç—å —Ñ–∏—à–∫–∏ —É –∏–≥—Ä–æ–∫–∞ (buy-out):

/buy_out <–∏–º—è –∏–≥—Ä–æ–∫–∞> <—Å—É–º–º–∞>

–ü—Ä–∏–º–µ—Ä: /buy_out –í–∞—Å—è 5000

–ó–∞–∫—Ä—ã—Ç—å –∏–≥—Ä—É:

/end_game

–û–±–Ω—É–ª—è–µ—Ç –≤—Å–µ –±–∞–ª–∞–Ω—Å—ã –≥—Ä—É–ø–ø—ã –∏ –∏–≥—Ä–æ–∫–æ–≤.

–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –≥—Ä—É–ø–ø—ã:

/group_balance

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—ç—à, –¥–æ–ª–≥–∏, —Ñ–∏—à–∫–∏, —Ä–µ–π–∫ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.

–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ–ª–≥–∏ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏:

/match_debts

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç, –∫—Ç–æ –∫–æ–º—É –¥–æ–ª–∂–µ–Ω, –∏ —É–ø—Ä–æ—â–∞–µ—Ç –≤–∑–∞–∏–º–æ—Ä–∞—Å—á—ë—Ç—ã.

    """
    await context.bot.send_message(chat_id=update.effective_chat.id, text=help_text)

import random


async def register(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    name_parts = context.args
    if name_parts:
        name = ' '.join(name_parts)
        users[user_id] = {'name': name, 'groups': {}}  # <-- –≤–æ—Ç —Å—é–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º
        await _save_players_to_file()
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {name}")
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /register.")


def load_players():
    if os.path.exists('players.csv'):
        with open('players.csv', 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            header = next(reader, None)
            for row in reader:
                if len(row) >= 6:
                    user_id = int(row[0])
                    name = row[1]
                    group_id = row[2]
                    cash = float(row[3]) if row[3] else 0.0
                    debt = float(row[4]) if row[4] else 0.0
                    chips = float(row[5]) if row[5] else 0.0

                    if user_id not in users:
                        users[user_id] = {'name': name, 'groups': {}}

                    if group_id:
                        users[user_id]['groups'][group_id] = True
                        group_members[(user_id, group_id)] = {'cash': cash, 'debt': debt, 'chips': chips}

        print("–î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")



async def create_group(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    print(f"CREATE_GROUP: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /create_group —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {context.args}")
    if user_id not in users:
        print(f"CREATE_GROUP: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /register <–∏–º—è>, –ø—Ä–µ–∂–¥–µ —á–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –≥—Ä—É–ø–ø—É.")
        return

    if len(context.args) < 2:
        print(f"CREATE_GROUP: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {context.args}")
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /create_group <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ä–µ–π–∫>")
        return
    group_name = context.args[0]
    rake_str = context.args[1]
    print(f"CREATE_GROUP: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: '{group_name}', –†–µ–π–∫ (—Å—Ç—Ä–æ–∫–∞): '{rake_str}'")
    try:
        rake = float(rake_str)
        if not 0 <= rake <= 100:
            print(f"CREATE_GROUP: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–π–∫: {rake}")
            raise ValueError
        rake /= 100
        print(f"CREATE_GROUP: –†–µ–π–∫ (—á–∏—Å–ª–æ): {rake}")
    except ValueError:
        print(f"CREATE_GROUP: –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–π–∫–∞: '{rake_str}'")
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–†–µ–π–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 100.")
        return

    group_id = str(uuid.uuid4())
    invite_code = generate_invite_code_russian()
    admin_id = update.effective_user.id
    groups[group_id] = {'name': group_name, 'admin_id': admin_id, 'rake': rake, 'invite_code': invite_code, 'members': [admin_id], 'total_rake': 0, 'group_cash': 0, 'group_debt': 0}# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º total_rake –∏ group_cash
    print(f"CREATE_GROUP: –ì—Ä—É–ø–ø–∞ '{group_name}' (ID: {group_id}) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞. –ê–¥–º–∏–Ω: {admin_id}, –ö–æ–¥: {invite_code}")
    if admin_id in users:
        if 'groups' not in users[admin_id]:
            users[admin_id]['groups'] = {}
        users[admin_id]['groups'][group_id] = True
        await _save_players_to_file() # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–µ—Å—å —Ñ–∞–π–ª
        print(f"CREATE_GROUP: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–ª–µ–Ω—Å—Ç–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {admin_id} –≤ –≥—Ä—É–ø–ø–µ {group_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    groups[group_id] = {
        'name': group_name,
        'admin_id': admin_id,
        'rake': rake,
        'invite_code': invite_code,
        'members': [admin_id],
        'cash': 0,  # <-- –¥–æ–±–∞–≤—å —ç—Ç–æ
        'debt': 0,  # <-- –∏ —ç—Ç–æ
        'chips': 0,  # <-- –∏ —ç—Ç–æ
        'total_rake': 0  # <-- –∏ —ç—Ç–æ
    }
    group_members[(admin_id, group_id)] = {'cash': 0, 'debt': 0, 'chips': 0}
    await save_groups()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
    await _save_players_to_file()
    print(f"CREATE_GROUP: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ {group_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ groups.csv")
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ì—Ä—É–ø–ø–∞ '{group_name}' —Å–æ–∑–¥–∞–Ω–∞! ID: {group_id}, –ö–æ–¥ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {invite_code}")

async def _update_player_file(user_id):
    with open('players.csv', 'r', encoding='utf-8') as f:
        reader = csv.reader(f)
        header = next(reader)
        rows = list(reader)

    with open('players.csv', 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(header)
        for row in rows:
            uid = int(row[0])
            if uid == user_id:
                writer.writerow([uid, users[uid]['name'], json.dumps(users[uid].get('groups', {}))])
            else:
                writer.writerow(row)
async def join_group(update: Update, context: CallbackContext):
    print(f"join_group –≤—ã–∑–≤–∞–Ω–∞ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {context.args}")

    user_id = update.effective_user.id
    if not context.args:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–£–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–æ–¥ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.")
        return

    group_identifier = context.args[0]

    if user_id not in users:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /register <–∏–º—è>")
        return

    found_group_id = None
    if group_identifier in groups:
        found_group_id = group_identifier
    else:
        print(f"–ü—ã—Ç–∞—é—Å—å –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –ø–æ –∫–æ–¥—É: '{group_identifier}'")
        for gid, ginfo in groups.items():
            print(f"–°—Ä–∞–≤–Ω–∏–≤–∞—é —Å –∫–æ–¥–æ–º –≤ –≥—Ä—É–ø–ø–µ: '{ginfo['invite_code']}'")
            if ginfo['invite_code'] == group_identifier:
                found_group_id = gid
                break

    if found_group_id:
        print('–≥—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞')
        if (user_id, found_group_id) in group_members:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã —É–∂–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å
        group_members[(user_id, found_group_id)] = {'cash': 0, 'debt': 0, 'chips': 0}
        if 'groups' not in users[user_id]:
            users[user_id]['groups'] = {}
        users[user_id]['groups'][found_group_id] = True
        groups[found_group_id].setdefault('members', []).append(user_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        await _save_players_to_file()
        await save_groups()

        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ '{groups[found_group_id]['name']}'. –ë–∞–ª–∞–Ω—Å: –ö—ç—à: 0, –î–æ–ª–≥: 0, –§–∏—à–∫–∏: 0")

        admin_id = groups[found_group_id]['admin_id']
        try:
            await context.bot.send_message(chat_id=admin_id, text=f"{users[user_id]['name']} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥—Ä—É–ø–ø–µ '{groups[found_group_id]['name']}'.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ì—Ä—É–ø–ø–∞ —Å ID –∏–ª–∏ –∫–æ–¥–æ–º '{group_identifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


async def _save_players_to_file():
    with open('players.csv', 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['player_id', 'player_name', 'group_id', 'cash', 'debt', 'chips'])
        for uid, uinfo in users.items():
            user_groups = [gid for gid in uinfo.get('groups', {})]
            if not user_groups:
                writer.writerow([uid, uinfo['name'], '', 0, 0, 0])
            else:
                for gid in user_groups:
                    pinfo = group_members.get((uid, gid), {'cash': 0, 'debt': 0, 'chips': 0})
                    writer.writerow([uid, uinfo['name'], gid, pinfo['cash'], pinfo['debt'], pinfo['chips']])
    print("–§–∞–π–ª players.csv –æ–±–Ω–æ–≤–ª—ë–Ω.")



async def _save_players_to_file():
    with open('players.csv', 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['player_id', 'player_name', 'group_id', 'cash', 'debt', 'chips'])

        # –°–Ω–∞—á–∞–ª–∞ –ø–∏—à–µ–º –≤—Å–µ—Ö, –∫—Ç–æ –≤ –≥—Ä—É–ø–ø–∞—Ö
        for (uid, gid), pinfo in group_members.items():
            writer.writerow([uid, users[uid]['name'], gid, pinfo['cash'], pinfo['debt'], pinfo['chips']])

        # –¢–µ–ø–µ—Ä—å –≤—Å–µ—Ö, –∫—Ç–æ –ó–ê–†–ï–ì–ê–ù, –Ω–æ –µ—â—ë –ù–ò –í –û–î–ù–û–ô –≥—Ä—É–ø–ø–µ
        written_users = {uid for (uid, _) in group_members.keys()}
        for uid, uinfo in users.items():
            if uid not in written_users:
                writer.writerow([uid, uinfo['name'], '', 0, 0, 0])

    print("–§–∞–π–ª players.csv –æ–±–Ω–æ–≤–ª–µ–Ω.")








async def buy_in(update: Update, context: CallbackContext):
    admin_id = update.effective_user.id
    group_id = next((gid for gid, g in groups.items() if g['admin_id'] == admin_id), None)

    if not group_id:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã.")
        return

    if len(context.args) != 3:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /buy_in <–∏–º—è –∏–≥—Ä–æ–∫–∞> <–¥–æ–ª–≥/–∫—ç—à> <—Å—É–º–º–∞>")
        return

    player_name, payment_type, amount_str = context.args
    try:
        amount = int(amount_str)
        if amount <= 0 or payment_type.lower() not in ['–¥–æ–ª–≥', '–∫—ç—à']:
            raise ValueError
    except ValueError:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
        return

    player_name_lower = player_name.lower()
    player_user_id = next((uid for uid, u in users.items() if u['name'].lower() == player_name_lower), None)
    if not player_user_id or (player_user_id, group_id) not in group_members:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ.")
        return

    player_info = group_members[(player_user_id, group_id)]
    group_info = groups[group_id]

    # --- –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏—à–∫–∏ ---
    player_info['chips'] += amount
    group_info['chips'] -= amount

    if payment_type.lower() == '–∫—ç—à':
        player_info['cash'] -= amount
        group_info['cash'] += amount
    else:
        player_info['debt'] -= amount
        group_info['debt'] += amount

    await _save_players_to_file()
    await save_groups()

    await context.bot.send_message(chat_id=update.effective_chat.id, text=f"{amount} –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ '{payment_type}' –∏–≥—Ä–æ–∫—É '{player_name}'.")

    # --- –°–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É ---
    await context.bot.send_message(chat_id=player_user_id,
                                   text=f"–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ {amount} —Ñ–∏—à–µ–∫ –∫–∞–∫ '{payment_type}'.\n"
                                        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:\n"
                                        f"- –ö—ç—à: {player_info['cash']}\n"
                                        f"- –î–æ–ª–≥: {player_info['debt']}\n"
                                        f"- –§–∏—à–∫–∏: {player_info['chips']}")



async def end_game(update: Update, context: CallbackContext):
    admin_id = update.effective_user.id
    group_id = next((gid for gid, g in groups.items() if g['admin_id'] == admin_id), None)

    if not group_id:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã.")
        return

    group_info = groups[group_id]
    total_rake = group_info.get('total_rake', 0)

    # –û–±–Ω—É–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –≥—Ä—É–ø–ø—ã
    group_info['cash'] = 0
    group_info['debt'] = 0
    group_info['chips'] = 0
    group_info['total_rake'] = 0

    # –û–±–Ω—É–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
    for (uid, gid), member_info in list(group_members.items()):
        if gid == group_id:
            member_info['cash'] = 0
            member_info['debt'] = 0
            member_info['chips'] = 0

    await save_groups()
    await _save_players_to_file()

    await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ò–≥—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ '{group_info['name']}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–π–∫ —Å–µ—Å—Å–∏–∏: {total_rake}.\n–í—Å–µ –±–∞–ª–∞–Ω—Å—ã –≥—Ä—É–ø–ø—ã –∏ –∏–≥—Ä–æ–∫–æ–≤ –æ–±–Ω—É–ª–µ–Ω—ã.")

async def balance(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user_name = users.get(user_id, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')

    if not any((user_id, gid) in group_members for gid in groups):
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
        return

    balance_text = f"–ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞ {user_name}:\n"

    for (uid, gid), member_info in group_members.items():
        if uid == user_id:
            group_name = groups.get(gid, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞')
            cash = member_info.get('cash', 0)
            debt = member_info.get('debt', 0)
            chips = member_info.get('chips', 0)

            balance_text += f"\n–ì—Ä—É–ø–ø–∞: '{group_name}'\n"
            balance_text += f"- –ö—ç—à: {cash}\n"
            balance_text += f"- –î–æ–ª–≥: {debt}\n"
            balance_text += f"- –§–∏—à–∫–∏: {chips}\n"

    await context.bot.send_message(chat_id=update.effective_chat.id, text=balance_text)


async def who_am_i(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user_info = users.get(user_id)

    if user_info:
        name = user_info['name']
        groups_info = user_info.get('groups', {})
        group_names = []
        for group_id in groups_info:
            group = groups.get(group_id)
            if group:
                group_names.append(f"{group['name']} (ID: {group_id})")

        groups_str = ", ".join(group_names) if group_names else "–Ω–µ—Ç"

        message = f"–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
        message += f"- –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: –î–∞\n"
        message += f"- –ò–º—è: {name}\n"
        message += f"- –í–∞—à ID: {user_id}\n"
        message += f"- –í—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–∞—Ö: {groups_str}"
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register <–∏–º—è>.")


async def group_balance(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    my_groups_balance = ""
    found_group = False

    for group_id, group_info in groups.items():
        if group_info['admin_id'] == user_id:
            found_group = True
            cash = group_info.get('cash', 0)
            debt = group_info.get('debt', 0)
            chips = group_info.get('chips', 0)
            total_rake = group_info.get('total_rake', 0)
            rake_percentage = group_info.get('rake', 0) * 100

            net_balance = cash + debt + chips  # –ê–∫—Ç–∏–≤—ã - –ü–∞—Å—Å–∏–≤—ã, —Ç.–∫. chips - —ç—Ç–æ –ø–∞—Å—Å–∏–≤

            # --- –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ group_members ---
            player_names = []
            for (uid, gid), member_info in group_members.items():
                if gid == group_id:
                    player_names.append(users[uid]['name'])
            players_str = ", ".join(player_names) if player_names else "–Ω–µ—Ç"

            my_groups_balance += f"–ì—Ä—É–ø–ø–∞ '{group_info['name']}':\n"
            my_groups_balance += f"- –ö—ç—à –≥—Ä—É–ø–ø—ã: {cash}\n"
            my_groups_balance += f"- –î–æ–ª–≥–æ–≤—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≥—Ä—É–ø–ø—ã (–∞–∫—Ç–∏–≤): {debt}\n"
            my_groups_balance += f"- –§–∏—à–∫–∏ –Ω–∞ —Ä—É–∫–∞—Ö —É –∏–≥—Ä–æ–∫–æ–≤ (–ø–∞—Å—Å–∏–≤): {chips}\n"
            my_groups_balance += f"- –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ä–µ–π–∫: {total_rake}\n"
            my_groups_balance += f"- –ß–∏—Å—Ç—ã–π –±–∞–ª–∞–Ω—Å –≥—Ä—É–ø–ø—ã: {net_balance:.2f} (—Ä–µ–π–∫: {rake_percentage}%)\n"
            my_groups_balance += f"- –ò–≥—Ä–æ–∫–∏ –≤ –≥—Ä—É–ø–ø–µ: {players_str}\n\n"

    if found_group:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ë–∞–ª–∞–Ω—Å –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø:\n{my_groups_balance}")
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã.")



async def save_groups():
    with open('groups.csv', 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['group_id', 'name', 'admin_id', 'rake', 'cash', 'debt', 'chips', 'total_rake', 'invite_code'])
        for gid, ginfo in groups.items():
            writer.writerow([gid, ginfo['name'], ginfo['admin_id'], ginfo['rake'], ginfo['cash'], ginfo['debt'], ginfo['chips'], ginfo['total_rake'], ginfo['invite_code']])
    print("–î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")


def load_groups():
    if os.path.exists('groups.csv'):
        with open('groups.csv', 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            header = next(reader, None)  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
            for row in reader:
                if len(row) >= 9:
                    group_id = row[0]
                    name = row[1]
                    admin_id = int(row[2])
                    rake = float(row[3])
                    cash = float(row[4])
                    debt = float(row[5])
                    chips = float(row[6])
                    total_rake = float(row[7])
                    invite_code = row[8].strip()

                    groups[group_id] = {
                        'name': name,
                        'admin_id': admin_id,
                        'rake': rake,
                        'cash': cash,
                        'debt': debt,
                        'chips': chips,
                        'total_rake': total_rake,
                        'invite_code': invite_code
                    }

        print("–î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")


async def post_init(app):
    load_groups()
    load_players()
    print("–î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

async def buy_out(update: Update, context: CallbackContext):
    admin_id = update.effective_user.id
    group_id = next((gid for gid, g in groups.items() if g['admin_id'] == admin_id), None)

    if not group_id:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã.")
        return

    if len(context.args) != 2:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /buy_out <–∏–º—è –∏–≥—Ä–æ–∫–∞> <—Å—É–º–º–∞>")
        return

    player_name, amount_str = context.args
    try:
        amount = int(amount_str)
        if amount <= 0:
            raise ValueError
    except ValueError:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return

    player_name_lower = player_name.lower()
    player_user_id = next(
        (uid for uid, u in users.items() if u['name'].lower() == player_name_lower and group_id in u['groups']), None)

    if not player_user_id or (player_user_id, group_id) not in group_members:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ.")
        return

    player_info = group_members[(player_user_id, group_id)]
    group_info = groups[group_id]

    # 1. –°–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∏—à–∫–∏
    player_info['chips'] -= amount
    group_info['chips'] += amount

    # 2. –†–µ–π–∫
    rake_amount = int(amount * group_info['rake'])
    group_info['total_rake'] += rake_amount
    payout = amount  # –í—Å—è —Å—É–º–º–∞ –≤–∫–ª—é—á–∞—é—â–∞—è —Ä–µ–π–∫, cash –∏ debt

    # 3. –†–∞—Å—á—ë—Ç –≤—ã–ø–ª–∞—Ç
    payout_after_rake = payout - rake_amount
    payout_remaining = payout_after_rake

    # 4. –ó–∞–∫—Ä—ã—Ç–∏–µ cash –∏–≥—Ä–æ–∫–∞
    cash_to_close = min(payout_remaining, -player_info['cash'])
    player_info['cash'] += cash_to_close
    group_info['cash'] -= cash_to_close
    payout_remaining -= cash_to_close

    # 5. –ó–∞–∫—Ä—ã—Ç–∏–µ debt –∏–≥—Ä–æ–∫–∞
    debt_to_close = min(payout_remaining, -player_info['debt'])
    player_info['debt'] += debt_to_close
    group_info['debt'] -= debt_to_close
    payout_remaining -= debt_to_close

    # 6. –û—Å—Ç–∞—Ç–æ–∫ ‚Äî –µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è ‚Äî —ç—Ç–æ –ø—Ä–∏–±—ã–ª—å –∏–≥—Ä–æ–∫–∞
    # --- 5. –û—Å—Ç–∞—Ç–æ–∫ –∫–∞–∫ –ø—Ä–∏–±—ã–ª—å ---
    cash_profit = 0
    debt_added = 0  # –ù–æ–≤–æ–µ –ø–æ–ª–µ: –¥–æ–ª–≥, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–∏–º, –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫—ç—à–∞

    if payout_remaining > 0:
        if group_info['cash'] >= payout_remaining:
            cash_profit = payout_remaining
            player_info['cash'] += cash_profit
            group_info['cash'] -= cash_profit
        else:
            cash_profit = group_info['cash']
            player_info['cash'] += cash_profit
            payout_remaining -= cash_profit
            group_info['cash'] = 0

            # –û—Å—Ç–∞–≤—à–µ–µ—Å—è ‚Äî –≤ –¥–æ–ª–≥
            debt_added = payout_remaining
            player_info['debt'] += debt_added
            group_info['debt'] += debt_added


    await _save_players_to_file()
    await save_groups()

    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text=f"Buy-out '{player_name}' –Ω–∞ {amount} —Ñ–∏—à–µ–∫.\n"
                                        f"–†–µ–π–∫: {rake_amount}, –ó–∞–∫—Ä—ã—Ç–∏–µ cash: {cash_to_close}, –ó–∞–∫—Ä—ã—Ç–∏–µ debt: {debt_to_close}, –ü—Ä–æ—Ñ–∏—Ç: {payout_remaining}.\n"
                                        f"–ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞: Cash: {player_info['cash']}, Debt: {player_info['debt']}, Chips: {player_info['chips']}.\n"
                                        f"–ë–∞–ª–∞–Ω—Å –≥—Ä—É–ø–ø—ã: Cash: {group_info['cash']}, Debt: {group_info['debt']}, Chips: {group_info['chips']}, Rake: {group_info['total_rake']}.")
    debt_now = player_info['debt']
    if debt_now < 0:
        debt_msg = f"–í—ã –¥–æ–ª–∂–Ω—ã –≥—Ä—É–ø–ø–µ {-debt_now} –¥–æ–ª–≥–∞."
    elif debt_now > 0:
        debt_msg = f"–ì—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –≤–∞–º {debt_now} –¥–æ–ª–≥–∞."
    else:
        debt_msg = "–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω—ã."

    await context.bot.send_message(chat_id=player_user_id,
                                   text=f"–í—ã –æ—Ç–¥–∞–ª–∏ {amount} —Ñ–∏—à–µ–∫.\n"
                                        f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {cash_to_close + cash_profit} –∫—ç—à–∞.\n"
                                        f"–£ –≤–∞—Å –±—ã–ª–æ —Å–ø–∏—Å–∞–Ω–æ {debt_to_close} –¥–æ–ª–≥–∞.\n"
                                        f"{debt_msg}")

async def match_debts(update: Update, context: CallbackContext):
    admin_id = update.effective_user.id
    group_id = next((gid for gid, g in groups.items() if g['admin_id'] == admin_id), None)

    if not group_id:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã.")
        return

    group_info = groups[group_id]
    group_debt = group_info['debt']

    # –°–æ–±–∏—Ä–∞–µ–º –¥–æ–ª–∂–Ω–∏–∫–æ–≤ –∏ –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤
    debtors = []
    creditors = []

    for (uid, gid), pinfo in group_members.items():
        if gid == group_id:
            debt = pinfo['debt']
            if debt < 0:
                debtors.append({'id': uid, 'name': users[uid]['name'], 'amount': -debt})
            elif debt > 0:
                creditors.append({'id': uid, 'name': users[uid]['name'], 'amount': debt})

    matches = []
    player_messages = {}

    # –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–ª–≥–æ–≤: –≥—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –∏–≥—Ä–æ–∫—É, –∞ –∫—Ç–æ-—Ç–æ –¥–æ–ª–∂–µ–Ω –≥—Ä—É–ø–ø–µ
    for creditor in creditors:
        if group_debt < creditor['amount']:
            credit_to_cover = group_debt
        else:
            credit_to_cover = creditor['amount']

        if credit_to_cover > 0:
            for debtor in debtors:
                if debtor['amount'] == 0:
                    continue

                pay_amount = min(credit_to_cover, debtor['amount'])

                if pay_amount > 0:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
                    debtor['amount'] -= pay_amount
                    credit_to_cover -= pay_amount
                    group_debt -= pay_amount

                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É
                    matches.append(f"{debtor['name']} –¥–æ–ª–∂–µ–Ω {creditor['name']} {pay_amount}")

                    # –°–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞–º
                    player_messages.setdefault(debtor['id'], []).append(f"–í—ã –¥–æ–ª–∂–Ω—ã {creditor['name']} {pay_amount}")
                    player_messages.setdefault(creditor['id'], []).append(f"{debtor['name']} –¥–æ–ª–∂–µ–Ω –≤–∞–º {pay_amount}")

                if credit_to_cover == 0:
                    break

            # –û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ‚Äì –æ—Å—Ç–∞—ë—Ç—Å—è –≥—Ä—É–ø–ø–µ
            creditor['amount'] = credit_to_cover

    # –û—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–æ–ª–≥–∏ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏ –∏ –≥—Ä—É–ø–ø–æ–π
    for debtor in debtors:
        if debtor['amount'] > 0:
            matches.append(f"{debtor['name']} –¥–æ–ª–∂–µ–Ω –ì—Ä—É–ø–ø–∞ {debtor['amount']}")
            player_messages.setdefault(debtor['id'], []).append(f"–í—ã –¥–æ–ª–∂–Ω—ã –≥—Ä—É–ø–ø–µ {debtor['amount']}")
            group_debt += debtor['amount']

    for creditor in creditors:
        if creditor['amount'] > 0:
            matches.append(f"–ì—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ {creditor['name']} {creditor['amount']}")
            player_messages.setdefault(creditor['id'], []).append(f"–ì—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –≤–∞–º {creditor['amount']}")
            group_debt -= creditor['amount']

    group_info['debt'] = group_debt
    await save_groups()

    result_text = "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–ª–≥–æ–≤:\n" + "\n".join(matches) if matches else "–ù–µ—Ç –¥–æ–ª–≥–æ–≤ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏ –∏ –≥—Ä—É–ø–ø–æ–π."
    await context.bot.send_message(chat_id=update.effective_chat.id, text=result_text)

    for uid, msg_list in player_messages.items():
        personal_text = "–í–∞—à–∏ –≤–∑–∞–∏–º–æ—Ä–∞—Å—á—ë—Ç—ã:\n" + "\n".join(msg_list)
        try:
            await context.bot.send_message(chat_id=uid, text=personal_text)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É {uid}: {e}")



async def pre_shutdown(app):
    await save_groups()
    await _save_players_to_file()
    print("–î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø –∏ –∏–≥—Ä–æ–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")


    with open('players.csv', 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['player_id', 'player_name', 'groups'])
        for uid, uinfo in users.items():
            print(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ {uid}: {json.dumps(uinfo.get('groups', {}))}")
            writer.writerow([uid, uinfo['name'], json.dumps(uinfo.get('groups', {}))])
    print("–î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø –∏ –∏–≥—Ä–æ–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
async def _save_players_to_file():
    with open('players.csv', 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['player_id', 'player_name', 'group_id', 'cash', 'debt', 'chips'])

        for uid, uinfo in users.items():
            user_written = False
            for (uid2, gid), pinfo in group_members.items():
                if uid2 == uid:
                    writer.writerow([uid, uinfo['name'], gid, pinfo['cash'], pinfo['debt'], pinfo['chips']])
                    user_written = True
            if not user_written:
                writer.writerow([uid, uinfo['name'], '', 0, 0, 0])

    print("–§–∞–π–ª players.csv –æ–±–Ω–æ–≤–ª–µ–Ω.")



def main():
    # –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    application = ApplicationBuilder().token('YOUR_BOT_TOKEN').post_init(post_init).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('admin_info', admin_info))
    application.add_handler(CommandHandler('player_info', player_info))
    application.add_handler(CommandHandler('register', register))
    application.add_handler(CommandHandler('create_group', create_group))
    application.add_handler(CommandHandler('join', join_group))
    application.add_handler(CommandHandler('buy_in', buy_in))
    application.add_handler(CommandHandler('buy_out', buy_out))
    application.add_handler(CommandHandler('balance', balance))
    application.add_handler(CommandHandler('group_balance', group_balance))
    application.add_handler(CommandHandler('who', who_am_i)) # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /whoIam
    application.add_handler(CommandHandler('end_game', end_game)) # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /whoIam
    application.add_handler(CommandHandler('match_debts', match_debts))

    application.run_polling()

if __name__ == '__main__':
    main()